datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Define the user plans
enum UserPlan {
  FREE
  PRO
}

enum UserRole {
  DEFAULT
  ADMIN
}

model User {
  id                      String          @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?         @unique
  emailVerified           DateTime?
  image                   String?
  credits                 Int             @default(3)
  role                    UserRole        @default(DEFAULT)
  plan                    UserPlan        @default(FREE) // Add the plan field with a default value of FREE
  password                String?
  isTwoFactorAuthEnabled  Boolean         @default(false)
  twoFactorAuthVerified   DateTime?
  accounts                Account[]
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
